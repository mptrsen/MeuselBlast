#!/usr/bin/perl
use strict;		# make me write clean code
use warnings;		# cry if something seems odd

use Getopt::Std;
use Bio::Seq;		# handle sequence objects
use Bio::SeqIO;		# handle sequence files
#TODO use Tie::File;	

my $version = '0.2.1';
my $usage = '-B <BLAST result> -T <contig Trace list> [-R <Reads (raw data)>] [-C <Contigs (processed)>] [-S <search string>] [-t <reads threshold>] [-i <identities threshold>] [-s [LIR]] [-a] [-n] [-v]';

#------------------------------------------

# handle command line args

my %opts;
getopts('B:T:R:C:S:t:i:s:van', \%opts);
die "Usage: $0 $usage\n" 
	if (keys %opts == 0);
my $search_string 	= $opts{'S'} or die "Search string not specified (-S)\n";
my $blast_result_file	= $opts{'B'} or die "No BLAST result file provided (-B file)\n";
my $trace_list_file	= $opts{'T'} or die "No trace list file provided (-T file)\n";
my $reads_file		= $opts{'R'};
my $contigs_file	= $opts{'C'};
my $reads_threshold	= $opts{'t'};
my $idents_threshold	= $opts{'i'};
my $sort_column		= $opts{'s'};
my $print_all_contigs	= $opts{'a'};
my $no_overwrite	= $opts{'n'};
my $do_version		= $opts{'v'};

&do_version if defined $opts{'v'};

#-------------------------------------------

# declare & initialize variables

my $logfile 		= 'log.txt';
my $tablefile 		= 'table.txt';
$reads_threshold 	= 10	unless defined $reads_threshold;
$idents_threshold 	= 100	unless defined $idents_threshold;
my $count 		= 0;
my $found_count 	= 0;
my %sortable_by		= (	'L' => 'length', 	# length
				'I' => 'idents', 	# num identities
				'R' => 'num_reads' );	# num reads
my $contig_data;
my $contig_id;
my $relevant_contigs;
my $other_contigs;
my $not_print_other_contigs = 1 
	unless defined $print_all_contigs;	# those that do not match the thresholds criteria

#-------------------------------------------

# process input, potentially die many many times

chomp $search_string if defined $search_string;
if (defined $sort_column) {
	chomp $sort_column;
	die "-s: invalid sort criterion (allowed: [" , keys %sortable_by , "], see documentation (perldoc $0)\n" 
		unless ( (length $sort_column == 1) and (defined $sortable_by{uc $sort_column}) );
	$sort_column = $sortable_by{uc $sort_column};
}
else {
	$sort_column = 'num_reads';
}

die "-t: not an integer\n" if ( $reads_threshold =~ /\D/ );
die "-i: not an integer\n" if ( $idents_threshold =~ /\D/ );
die "-B: $blast_result_file not found: $!\n" unless (-e $blast_result_file);
die "-T: $trace_list_file not found: $!\n" unless (-e $trace_list_file);
die "-C: $contigs_file not found: $!\n" if ($contigs_file and not (-e $contigs_file));
die "-R: $reads_file not found: $!\n" if ( ($reads_file) and not (-e $reads_file) );


#-------------------------------------------

# start log file

open(my $logfh, '>', $logfile) or die "Wah: no open $logfile for writing: $!\n";
print "$0 version $version\n";
print $logfh "$0 version $version\n";
if (defined $search_string) {
	print "Search string: $search_string\n";
	print $logfh "Search string: $search_string\n";
}
print <<"EOF";
Reads threshold: $reads_threshold
Percent_id threshold: $idents_threshold
Provided BLAST result file: $blast_result_file
Provided trace list file: $trace_list_file
EOF

print $logfh <<"EOF";
Reads threshold: $reads_threshold
Percent_id threshold: $idents_threshold
Provided BLAST result file: $blast_result_file
Provided trace list file: $trace_list_file
EOF

if (defined $reads_file) {
	print "Provided reads FASTA file: $reads_file\n";
	print $logfh "Provided reads FASTA file: $reads_file\n";
}
if (defined $contigs_file) {
	print "Provided contigs FASTA file: $contigs_file\n";
	print $logfh "Provided contigs FASTA file: $contigs_file\n";
}
print "\n";
print $logfh "\n";

#-------------------------------------------

# read BLAST result file, print out result

$contig_data = &slurp_BLAST_result(\$blast_result_file);

print "\n";
print $logfh "\n";
printf "collected %d contig IDs from %s\n\n", scalar keys %$contig_data, $blast_result_file;
printf $logfh "collected %d contig IDs from %s\n\n", scalar keys %$contig_data, $blast_result_file;
if (scalar keys %$contig_data == 0) {
	print "zero contig IDs found for search string '$search_string', exiting\n";
	print $logfh "zero contig IDs found for search string '$search_string', exiting\n";
	exit;
}

#-------------------------------------------

# get number of reads and list of read IDs for each contig out of trace list file

&get_reads_for_contigs( $contig_data, $trace_list_file );

#-------------------------------------------

# sort by ANYTHING (yay), get relevant and irrelevant contigs

my $sorted_keys = &sort_by( $contig_data, $sort_column );

# get relevant and other contigs, i.e. those that are above the reads 
# and identities percentage thresholds, and all those that are below

($relevant_contigs, $other_contigs) = &get_relevant_contigs( $contig_data, $sorted_keys, $reads_threshold, $idents_threshold );

#-------------------------------------------

# print out the pretty table
# don't print other contigs unless requested otherwise

if ($print_all_contigs) {
	&print_pretty_table( $tablefile, $contig_data, $relevant_contigs, $other_contigs );
}
else {
	&print_pretty_table( $tablefile, $contig_data, $relevant_contigs );
}
print <<"EOF";

result table printed into $tablefile

EOF

print $logfh <<"EOF";

result table printed into $tablefile

EOF

#-------------------------------------------

# now there is an array @$relevant_contigs that has all the 
# contigs where #reads >= $reads_threshold
# sorted by the relevant column
# plus an array @$other_contigs which has all the others

#-------------------------------------------

# exit if no further files are defined (in case the user only wants 
# to print out the table)

unless ( defined $contigs_file or defined $reads_file ) {
	print "no further files defined, exiting now\n";
	print $logfh "no further files defined, exiting now\n";
	exit;
}

#-------------------------------------------

# clean up old output files, rename them to $filename.bak

&clean_up_output_files( $relevant_contigs ) 
	unless $no_overwrite;

print "\n";
print $logfh "\n";

#-------------------------------------------

# read through the mega file, if defined
if (defined $reads_file) {
	&write_reads_for_relevant_contigs( $relevant_contigs, $reads_file );
}

print "\n";
print $logfh "\n";

#-------------------------------------------

# get contigs, append them to their respective files, exit if not defined

unless (defined $contigs_file) {
	print "no further files defined, exiting now\n";
	print $logfh "no further files defined, exiting now\n";
	exit;
}

&append_contigs( $relevant_contigs, $contigs_file );

print "\n";
print $logfh "\n";

#-------------------------------------------

# say bye-bye, exit gracefully

print <<"EOF";
done.
Thanks for using me!

EOF

print $logfh <<"EOF";
done.
EOF

exit;





#-------------------------------------------
# functions follow
#-------------------------------------------

# sub: do_version
# prints name and version and exits

sub do_version {
	print "$0 $version\n";
	exit;
}


#-------------------------------------------

# sub: slurp_BLAST_result
# input: BLAST result file name
# output: reference to contig data hash

sub slurp_BLAST_result {

	open(my $fh_blast_result_file, '<', ${shift @_}) or die "Wah: no open $blast_result_file for reading: $!\n";
	print "reading BLAST result file $blast_result_file\n";
	print $logfh "reading BLAST result file $blast_result_file\n";

	# this is the hash that will hold all the contig data
	# it is bound to become 3-dimensional
	my $contig_data = {  };
	my $contig_id;
	my ($id_count, $length_count, $idents_count);
	while (<$fh_blast_result_file>) {
		++$count;
		chomp;
		if ( /^>[a-z]+(\d+)\|(.+)/i ) {
			die "error in BLAST result file $blast_result_file: contig ID $contig_id does not have matching 'length' record, exiting\n"
				if ($contig_id and not defined $contig_data->{$contig_id}{'length'});
			die "error in BLAST result file $blast_result_file: contig ID $contig_id does not have matching 'identities' record, exiting\n"
				if ($contig_id and not defined $contig_data->{$contig_id}{'idents'});
		# TODO do something so that the search string becomes relevant...
			next if exists $contig_data->{$1};
			$contig_id = $1;
			$contig_data->{$contig_id} = { 'string' => $2 };
			$contig_data->{$contig_id}{'string'} =~ s/\W+$//;
			$contig_data->{$contig_id}{'string'} =~ s/\W/_/g;
			++$id_count;
			
		}
		elsif ( /Length\s=\s(\d+)/ ) {
			next if defined $contig_data->{$contig_id}{'length'};
			$contig_data->{$contig_id}{'length'} = $1;
			++$length_count;
		}
		elsif ( /Identities\s=\s\d+\/\d+\s\((\d+)/ ) {
			next if defined $contig_data->{$contig_id}{'idents'};
			$contig_data->{$contig_id}{'idents'} = $1;
			++$idents_count;
		}
		elsif ( /^Query=\s[a-z]+(\d+)\|(\w+)/i ) {
			printf "query ID: %s\n", $1;
			printf $logfh "query ID: %s\n", $1;
		}
	}
	close $$fh_blast_result_file;

	die "Corrupt BLAST result file? Contig IDs, lengths and/or perc_id do not match in $blast_result_file\n"
		unless ( ($id_count + $length_count + $idents_count) % 3 == 0 );

	foreach my $key (keys %$contig_data) {
		delete $contig_data->{$key} 
			unless $contig_data->{$key}{'string'} =~ /$search_string/i;
	}


	# by now the hash in $contig_data is hopefully filled with arrays
	# that contain: contig string, length, identities
	return $contig_data;

}


#-------------------------------------------

# sub: get_reads_for_contigs
# input: reference to data hash, scalar trace list file name
# output: nothing, but populates the data hash with the traces (num reads, list of reads)

sub get_reads_for_contigs {

	my $contig_data = shift @_;
	my $trace_list_file = shift @_;
	$count = 0;
	$found_count = 0;

	die "contig trace list not defined, exiting\n" 
		unless defined $trace_list_file;
	open( my $fh_trace_list_file, '<', $trace_list_file ) or die "Wah: no open $trace_list_file for reading: $!\n";

	print "reading trace list file $trace_list_file, picking out reads for those contigs that are in $blast_result_file\n";
	print $logfh "reading trace list file $trace_list_file, picking out reads for those contigs that are in $blast_result_file\n";

	# discard first line as it is a header we don't need
	<$fh_trace_list_file>;

	while (<$fh_trace_list_file>) {
		++$count;
		# pick out: contig ID, #reads, reads 
		/(\d+)\s+(\d+)\s+(.+)/;
		if ( exists $contig_data->{$1} ) {
			++$found_count;
			$contig_data->{$1}{'num_reads'} = $2;
			# create an array ref and pin it to contig data hash
			$contig_data->{$1}{'list_of_reads'} = [split(', ', $3)];
		}
	}
	close $fh_trace_list_file;
	print "\n";
	print $logfh "\n";
	printf "found %s matching contig IDs, omitted %d of %d contig IDs\n", $found_count, $count-$found_count, $count;
	printf $logfh "found %s matching contig IDs, omitted %d of %d contig IDs\n", $found_count, $count-$found_count, $count;

}


#-------------------------------------------

# sub: sort_by
# input: reference to data hash, scalar sort column
# output: reference to array of keys sorted by sort column

sub sort_by {

	my $contig_data = shift @_;
	my $sort_by = shift @_;
	my @sorted_keys = sort( { $contig_data->{$b}{$sort_by} <=> $contig_data->{$a}{$sort_by} } keys %$contig_data );

	return \@sorted_keys;

}


#-------------------------------------------

# sub: get_relevant_contigs
# input: 
#	contig data hash
#	sorted keys array
#	reads threshold scalar
#	identities percentage threshold scalar, as references
# output: 
# reference to @relevant_contigs

sub get_relevant_contigs {

	my $contig_data 	= shift @_;
	my $sorted_keys 	= shift @_;
	my $reads_threshold 	= shift @_;
	my $idents_threshold 	= shift @_;
	my $relevant_contigs 	= [  ];
	my $other_contigs	= [  ];

	foreach my $key (@$sorted_keys) {
		if ( ( $contig_data->{$key}{'num_reads'} >= $reads_threshold ) and ( $contig_data->{$key}{'idents'} >= $idents_threshold ) ) {
			push( @$relevant_contigs, $key );
		}
		else {
			push ( @$other_contigs, $key );
		}
	}

	return ($relevant_contigs, $other_contigs);

}


#-------------------------------------------

# sub: print_pretty_table
# input: 
#	contig data hash, 
#	sorted keys array, 
#	reads threshold, 
#	idents threshold (as references)
# output: pretty table on the screen :)
# returns reference to @sorted_keys

sub print_pretty_table {

	my $tablefile		= shift @_;
	my $contig_data 	= shift @_;
	my $relevant_contigs 	= shift @_;
	my $other_contigs	= shift @_;

	open( my $tablefh, '>', $tablefile );

	printf "%-10s\t%-10s\t%s\t%s%%\t%s\t%s\n", 
		'Contig ID', 
		'string', 
		'length', 
		'idents', 
		'#reads',
		'read IDs'
		;
	print '-' x 70, "\n";
	printf $tablefh "%-10s\t%-10s\t%s\t%s%%\t%s\t%s\n", 
		'Contig ID', 
		'string', 
		'length', 
		'idents', 
		'#reads',
		'read IDs'
		;
	print $tablefh '-' x 70, "\n";
	foreach my $key (@$relevant_contigs) {
		# watch out: this prints the read IDs only for those contigs where
		# BOTH number of reads and identities percentage are 
		# ABOVE their respective thresholds (see sub: get_relevant_contigs). 
		# May lead to confusion :)
		printf "%-10d\t%s\t%d\t%d%%\t%d\t" . ("%s " x @{$contig_data->{$key}{'list_of_reads'}}) . "\n", 
		       $key, 					# contig ID
		       $contig_data->{$key}{'string'}, 		# contig string 
		       $contig_data->{$key}{'length'},		# contig length
		       $contig_data->{$key}{'idents'},		# num identities
		       $contig_data->{$key}{'num_reads'}, 	# num of reads
		       @{$contig_data->{$key}{'list_of_reads'}}	# list of reads
		;
		printf $tablefh "%-10d\t%s\t%d\t%d%%\t%d\t" . ("%s " x @{$contig_data->{$key}{'list_of_reads'}}) . "\n", 
		       $key, 					# contig ID
		       $contig_data->{$key}{'string'}, 		# contig string 
		       $contig_data->{$key}{'length'},		# contig length
		       $contig_data->{$key}{'idents'},		# num identities
		       $contig_data->{$key}{'num_reads'}, 	# num of reads
		       @{$contig_data->{$key}{'list_of_reads'}}	# list of reads
		;
	}

	unless ($not_print_other_contigs) {
		foreach my $key (@$other_contigs) {
			printf "%-10d\t%s\t%d\t%d%%\t%d\n", 
			       $key, 					# contig ID
			       $contig_data->{$key}{'string'}, 		# contig string 
			       $contig_data->{$key}{'length'},		# contig length
			       $contig_data->{$key}{'idents'},		# num identities
			       $contig_data->{$key}{'num_reads'}, 	# num of reads
			;
			printf $tablefh "%-10d\t%s\t%d\t%d%%\t%d\n", 
			       $key, 					# contig ID
			       $contig_data->{$key}{'string'}, 		# contig string
			       $contig_data->{$key}{'length'},		# contig length
			       $contig_data->{$key}{'idents'},		# num identities
			       $contig_data->{$key}{'num_reads'}, 	# num of reads
			;
		}
	}

}



#-------------------------------------------

# sub: clean_up_output_files
# input: reference to list of relevant contigs

sub clean_up_output_files {

	my $relevant_contigs = shift @_;
	my $backup_ext = '.bak';
	foreach my $key (@$relevant_contigs) {
		my $filename = "Contig$key.fas";
		if (-e $filename) {
			rename( $filename, $filename.$backup_ext ) or die "wah: could not rename $filename during backup: $!\n";
			print "backed up old file $filename to ", $filename.$backup_ext, "\n";
			print $logfh "backed up old file $filename to ", $filename.$backup_ext, "\n";
		}
	}

}


#-------------------------------------------

# sub: write_reads_for_relevant_contigs
# input: reference to list of relevant contigs, contig file name
# output: one file for each relevant contig

sub write_reads_for_relevant_contigs {

	my $relevant_contigs = shift @_;
	my $reads_file = shift @_;
	$count = 0;
	$found_count = 0;
	my $seqio_obj = Bio::SeqIO->new( -file => $reads_file, -format => 'fasta' );
	print "going through reads FASTA file $reads_file seeking all reads for relevant contigs:\n";
	print $logfh "going through reads FASTA file $reads_file seeking all reads for relevant contigs:\n";
	

	while (my $seq_obj = $seqio_obj->next_seq) {
		++$count;
		print "searching... $count sequences so far\n" 
			if ($count % 1000 == 0);
		foreach my $key (@$relevant_contigs) {
			foreach my $read_id ( @{$contig_data->{$key}{'list_of_reads'}} ) {
				if ( $seq_obj->display_id eq $read_id ) {
					++$found_count;
					my $outf_obj = Bio::SeqIO->new( -file => ">>Contig$key.fas", -format => 'fasta' );
					$outf_obj->write_seq($seq_obj);
					print "found $read_id for contig $key\n";
					print $logfh "found $read_id for contig $key\n";
				}
			}
		}
	}

	print "found $found_count matches in $count reads\n";
	print "written to their respective files:\n";
	print "Contig$_.fas\n" foreach @$relevant_contigs;

	print $logfh "found $found_count matches in $count reads\n";
	print $logfh "written to their respective files:\n";

	print $logfh "Contig$_.fas\n" foreach @$relevant_contigs;

}


#-------------------------------------------

# sub: append_contigs
# input: reference to list of relevant contigs, contigs file name
# appends the contigs to their respective files

sub append_contigs {

	my $relevant_contigs = shift @_;
	my $contigs_file = shift @_;
	$count = 0;
	$found_count = 0;
	my $seqio_obj = Bio::SeqIO->new( -file => $contigs_file, -format => 'fasta' );

	print "reading contigs FASTA $contigs_file seeking all relevant contigs:\n";
	print $logfh "reading contigs FASTA $contigs_file seeking all relevant contigs:\n";

	while (my $seq_obj = $seqio_obj->next_seq) {
		++$count;
		if ($count % 1000 == 0) {
			print "searching... $count contigs so far: ",$seq_obj->display_id,"\n" ;
		}
		foreach my $key (@$relevant_contigs) {
			if ( $seq_obj->display_id =~ /\w*$key/ ) {
				++$found_count;
				my $outf_obj = Bio::SeqIO->new( -file => ">>Contig$key.fas", -format => 'fasta' );
				$outf_obj->write_seq($seq_obj);
				print "found contig $key, appended to Contig$key.fas\n";
				print $logfh "found contig $key, appended to Contig$key.fas\n";

			}
		}
		last if ($found_count == scalar @$relevant_contigs);
	}

}



=head1 NAME 

MeuselBlast - skim through BLAST result files and process the information therein

=head1 SYNOPSIS 

MeuselBlast -B <BLAST result file> [-T <trace list file>] [-R <reads file>] [-S <search string>] [-C <contigs file>] [-t threshold] [-i threshold] [-s sort_column] [-n] [-a] [-v] 

=head1 DESCRIPTION

MeuselBlast will read through a provided BLAST result file by using a search string and pick out the alignment data, i.e. contig ID, identifier string (taxon name, whatever), sequence length, identities percentage. Then it will read through a provided trace list file and complement the data by adding the number of reads and the read IDs for each contig.

When this is done, it will print out a pretty table containing all this information. This table is sortable (-s) and optionally contains all the contigs, even those that do not fall into specified threshold criteria (-a). These thresholds can be set: number of reads (-t), identities percentage (-i).

=head1 OPTIONS

=head2 -B <file>

BLAST result file name. Mandatory.

=head2 -T <file>

Trace list file name. Mandatory.

=head2 -R <file>

Reads FASTA file. Optional: if omitted, MeuselBlast will only try to append the relevant contigs.

=head2 -C <file>

Contigs FASTA file. Optional: if omitted, MeuselBlast will only try to find the reads.

=head2 -S <search string>

Search the BLAST result file for <search string>. Optional - does nothing at the moment anyway :-)
Will soon be implemented, for the cases where you might have multiple BLAST results in a single file.

TODO for future versions: Think about whether using Bio::SearchIO is worth trading off the amazing read speed that we have now.

=head2 -t <i>

Reads threshold. Must be integer. The relevant contigs will be only those that have #reads >= the reads threshold. Defaults to 10.

=head2 -i <i>

Identities threshold. Must be integer. The relevant contigs will be only those that have an identities percentage >= the identities threshold. Defaults to 1000.

=head2 -s <col>

Sort column. You can sort the table by a column. Valid options are:
 L: Length
 I: Identities percentage
 R: number of Reads 

Defaults to R.

=head2 -a

Prints into the pretty table all contigs, even those which do not fall into the thresholds criteria. This will not print out all the read IDs, but everything else. Default is not to print all contigs.

=head2 -n

No-overwrite: Append to files, if they exist. Otherwise, rename existing files to $filename.bak and start new files (default behaviour).

=head2 -v

Print out name and version and exit

=head1 DATA STRUCTURE

=head2 You do not have to read this if you are not interested in the internals of this program. 

This section serves mostly as a reminder to myself and to make sure I understood the whole dereferencing brainfuck.

The contig_data hash is a hash of hashes keyed by the contig IDs. Each hash has the following keys: string, length, idents, num_reads, reads. The latter is an array of the read IDs. So it is a four-dimensional data structure and looks like this:

 +-----------+      +---------------+      +------+
 | contig ID |----->| string        |----->| name |
 +-----------+      +---------------+      +------+
                    +---------------+      +------+
   		    | length        |----->| 312  |
   		    +---------------+      +------+
   		    +---------------+      +------+
   		    | idents        |----->| 100  |
   		    +---------------+      +------+
   		    +---------------+      +------+
   		    | num_reads     |----->| 2179 |
   		    +---------------+      +------+
   		    +---------------+      +------+------+------+------+
   		    | list_of_reads |----->| ID 1 | ID 2 | ID 3 | ...  |
   		    +---------------+      +------+------+------+------+

The individual elements can be accessed by dereferencing them in an easy way, for example:

 # get num_reads for contig ID 16781542
 $contig_id = 16781542;
 $contig_data->{$contig_id}{'num_reads'}

Only the reads array requires a little bit more complicated syntax:

 # get list of reads for contig ID 16781542
 @{$contig_data->{$contig_id}{'list_of_reads'}}

Most of the time you will not want to access the individual read IDs, but if you want, you can do that too, of course:

 # get read ID at position 3
 $contig_data->{$contig_id}{'list_of_reads'}[3]

=head1 COPYRIGHT

(c) 2010 Malte Petersen <mptrsen@uni-bonn.de>

This code is provided as-is, i.e. without any warranties whatsoever. Use at your own risk. I take zero responsibility for anything you do with it, especially if something goes wrong. You may modify and distribute this code as you see fit. I would appreciate being given credit where appropriate, and if you would like to tell me, I am interested in what you use this program for.
=cut
